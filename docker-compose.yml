services:
  app:
    container_name: mindforge-server-llm_app
    image: ${IMAGE_NAME:-mindforge-server-llm:cpu}
    build:
      context: ./rust-server
      dockerfile: Dockerfile
    volumes:
      - ./prompts:/prompts:ro
      - ./models:/models:ro
    environment:
      MODEL_PATH: ${MODEL_PATH:-/models/Phi-3-mini-4k-instruct-Q4_K_S.gguf}
      N_PARALLEL: ${N_PARALLEL:-1}
      N_THREADS: ${N_THREADS:-0}
      N_BATCH: ${N_BATCH:-256}
      CTX: ${CTX:-2048}
      PORT: "3000"
    networks:
      - llm-net
    ports:
      - "3000:3000"
    restart: unless-stopped
  model-downloader:
    image: p3terx/aria2-pro:latest
    container_name: mindforge-server-llm_model_downloader
    volumes:
      - ./models:/models
    environment:
      MODEL_FILE: ${MODEL_FILE:-Phi-3-mini-4k-instruct-Q4_K_S.gguf}
      MODEL_URL: ${MODEL_URL:-https://huggingface.co/bartowski/Phi-3-mini-4k-instruct-GGUF/resolve/main/${MODEL_FILE}}
    entrypoint: [ "sh", "-c" ]
    command: >
      '[ -f /models/"$$MODEL_FILE" ] && echo "model exists: /models/$${MODEL_FILE}" || (mkdir -p /models && aria2c -c -x 16 -s 16 -k 1M -d /models -o "$$MODEL_FILE" "$$MODEL_URL")'
    restart: "no"

  caddy:
    container_name: mindforge-server-llm_caddy
    image: caddy:2
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/log/caddy:/var/log/caddy
      - caddy_data:/data
      - caddy_config:/config
      - ./deploy/Caddyfile:/etc/caddy/Caddyfile:ro
    depends_on:
      - app
    networks:
      - llm-net
    restart: unless-stopped

networks:
  llm-net:
    driver: bridge

volumes:
  caddy_data: {}
  caddy_config: {}
