version: "3.8"

services:
  app:
    container_name: mindforge-server-llm_app
    image: ${IMAGE_NAME:-mindforge-server-llm:cpu}
    build:
      context: .
    volumes:
      - ./prompts:/prompts:ro
      - ./models:/models:ro
    environment:
      - "N_PARALLEL=${N_PARALLEL:-1}"
      - "PORT=3000"
      # Tune for host: 10 CPU, 16GB RAM
      # Keep uvicorn workers low so they don't compete with the LLM CPU usage
      - "UVICORN_WORKERS=${UVICORN_WORKERS:-2}"
      # Give the LLM most of the CPU for inference threads
      - "N_THREADS=${N_THREADS:-8}"
      - "N_BATCH=${N_BATCH:-512}"
      - "MODEL_FILE=Phi-3-mini-4k-instruct-Q4_K_S.gguf"
    networks:
      - llm-net
    expose:
      - "3000"
      - "8080"
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          cpus: "${CPU_LIMIT:-8}"
          memory: "${MEM_LIMIT:-12G}"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  caddy:
    container_name: mindforge-server-llm_caddy
    image: caddy:2
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/log/caddy:/var/log/caddy
      - caddy_data:/data
      - caddy_config:/config
      - ./deploy/Caddyfile:/etc/caddy/Caddyfile:ro
    depends_on:
      - app
    networks:
      - llm-net
    restart: unless-stopped

networks:
  llm-net:
    driver: bridge

volumes:
  caddy_data: {}
  caddy_config: {}
